
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000087e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000087e  00000912  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080006e  0080006e  00000920  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000950  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000181c  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c20  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eab  00000000  00000000  00002f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  00003e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000787  00000000  00000000  00004130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cdd  00000000  00000000  000048b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005594  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 43 02 	call	0x486	; 0x486 <main>
  8a:	0c 94 3d 04 	jmp	0x87a	; 0x87a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <H_DC_motor_init>:
 *  Author: husse
 */ 
#include "DC_motor.h"


void H_DC_motor_init(DC_motor_object DC_motor){
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	00 d0       	rcall	.+0      	; 0x9a <H_DC_motor_init+0x8>
  9a:	00 d0       	rcall	.+0      	; 0x9c <H_DC_motor_init+0xa>
  9c:	1f 92       	push	r1
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	5a 83       	std	Y+2, r21	; 0x02
  a4:	6b 83       	std	Y+3, r22	; 0x03
  a6:	7c 83       	std	Y+4, r23	; 0x04
  a8:	8d 83       	std	Y+5, r24	; 0x05
	M_DIO_set_pin_direction(DC_motor.port,DC_motor.pin_1,output);
  aa:	14 2f       	mov	r17, r20
  ac:	6a 81       	ldd	r22, Y+2	; 0x02
  ae:	7b 81       	ldd	r23, Y+3	; 0x03
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	81 2f       	mov	r24, r17
  b4:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_set_pin_direction>
	M_DIO_set_pin_direction(DC_motor.port,DC_motor.pin_2,output);	
  b8:	6c 81       	ldd	r22, Y+4	; 0x04
  ba:	7d 81       	ldd	r23, Y+5	; 0x05
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	81 2f       	mov	r24, r17
  c0:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_set_pin_direction>
}
  c4:	0f 90       	pop	r0
  c6:	0f 90       	pop	r0
  c8:	0f 90       	pop	r0
  ca:	0f 90       	pop	r0
  cc:	0f 90       	pop	r0
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	1f 91       	pop	r17
  d4:	08 95       	ret

000000d6 <H_DC_motor_forward>:

void H_DC_motor_forward(DC_motor_object	DC_motor){
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	00 d0       	rcall	.+0      	; 0xde <H_DC_motor_forward+0x8>
  de:	00 d0       	rcall	.+0      	; 0xe0 <H_DC_motor_forward+0xa>
  e0:	1f 92       	push	r1
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	5a 83       	std	Y+2, r21	; 0x02
  e8:	6b 83       	std	Y+3, r22	; 0x03
  ea:	7c 83       	std	Y+4, r23	; 0x04
  ec:	8d 83       	std	Y+5, r24	; 0x05
	M_DIO_set_pin_value(DC_motor.port,DC_motor.pin_1,high);
  ee:	14 2f       	mov	r17, r20
  f0:	6a 81       	ldd	r22, Y+2	; 0x02
  f2:	7b 81       	ldd	r23, Y+3	; 0x03
  f4:	41 e0       	ldi	r20, 0x01	; 1
  f6:	81 2f       	mov	r24, r17
  f8:	0e 94 03 03 	call	0x606	; 0x606 <M_DIO_set_pin_value>
	M_DIO_set_pin_value(DC_motor.port,DC_motor.pin_2,low);
  fc:	6c 81       	ldd	r22, Y+4	; 0x04
  fe:	7d 81       	ldd	r23, Y+5	; 0x05
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	81 2f       	mov	r24, r17
 104:	0e 94 03 03 	call	0x606	; 0x606 <M_DIO_set_pin_value>
}
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	08 95       	ret

0000011a <H_DC_motor_backward>:

void H_DC_motor_backward(DC_motor_object DC_motor){
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	00 d0       	rcall	.+0      	; 0x122 <H_DC_motor_backward+0x8>
 122:	00 d0       	rcall	.+0      	; 0x124 <H_DC_motor_backward+0xa>
 124:	1f 92       	push	r1
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	5a 83       	std	Y+2, r21	; 0x02
 12c:	6b 83       	std	Y+3, r22	; 0x03
 12e:	7c 83       	std	Y+4, r23	; 0x04
 130:	8d 83       	std	Y+5, r24	; 0x05
	M_DIO_set_pin_value(DC_motor.port,DC_motor.pin_1,low);
 132:	14 2f       	mov	r17, r20
 134:	6a 81       	ldd	r22, Y+2	; 0x02
 136:	7b 81       	ldd	r23, Y+3	; 0x03
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	81 2f       	mov	r24, r17
 13c:	0e 94 03 03 	call	0x606	; 0x606 <M_DIO_set_pin_value>
	M_DIO_set_pin_value(DC_motor.port,DC_motor.pin_2,high);
 140:	6c 81       	ldd	r22, Y+4	; 0x04
 142:	7d 81       	ldd	r23, Y+5	; 0x05
 144:	41 e0       	ldi	r20, 0x01	; 1
 146:	81 2f       	mov	r24, r17
 148:	0e 94 03 03 	call	0x606	; 0x606 <M_DIO_set_pin_value>
}
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	08 95       	ret

0000015e <H_DC_motor_stop>:

void H_DC_motor_stop(DC_motor_object DC_motor){
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	00 d0       	rcall	.+0      	; 0x166 <H_DC_motor_stop+0x8>
 166:	00 d0       	rcall	.+0      	; 0x168 <H_DC_motor_stop+0xa>
 168:	1f 92       	push	r1
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	5a 83       	std	Y+2, r21	; 0x02
 170:	6b 83       	std	Y+3, r22	; 0x03
 172:	7c 83       	std	Y+4, r23	; 0x04
 174:	8d 83       	std	Y+5, r24	; 0x05
	M_DIO_set_pin_value(DC_motor.port,DC_motor.pin_1,low);
 176:	14 2f       	mov	r17, r20
 178:	6a 81       	ldd	r22, Y+2	; 0x02
 17a:	7b 81       	ldd	r23, Y+3	; 0x03
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	81 2f       	mov	r24, r17
 180:	0e 94 03 03 	call	0x606	; 0x606 <M_DIO_set_pin_value>
	M_DIO_set_pin_value(DC_motor.port,DC_motor.pin_2,low);
 184:	6c 81       	ldd	r22, Y+4	; 0x04
 186:	7d 81       	ldd	r23, Y+5	; 0x05
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	81 2f       	mov	r24, r17
 18c:	0e 94 03 03 	call	0x606	; 0x606 <M_DIO_set_pin_value>
}
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	08 95       	ret

000001a2 <H_Servo_init>:
 *  Author: husse
 */ 
#include "Servo.h"

void H_Servo_init(void){
	M_Timer_2_init(PWM);
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <M_Timer_2_init>
	M_Timer_2_start(prescaler);
 1a8:	85 e0       	ldi	r24, 0x05	; 5
 1aa:	0e 94 de 03 	call	0x7bc	; 0x7bc <M_Timer_2_start>
 1ae:	08 95       	ret

000001b0 <H_Servo_angle>:
}

void H_Servo_angle(u8 angle){
	M_Timer_2_PWM(((angle*31)/90)+62);	
 1b0:	2f e1       	ldi	r18, 0x1F	; 31
 1b2:	82 9f       	mul	r24, r18
 1b4:	c0 01       	movw	r24, r0
 1b6:	11 24       	eor	r1, r1
 1b8:	6a e5       	ldi	r22, 0x5A	; 90
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__divmodhi4>
 1c0:	8e e3       	ldi	r24, 0x3E	; 62
 1c2:	86 0f       	add	r24, r22
 1c4:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <M_Timer_2_PWM>
 1c8:	08 95       	ret

000001ca <H_ultrasonic_init>:
 *  Author: husse
 */ 

#include "ultrasonic.h"

void H_ultrasonic_init(ultrasonic_object UTS){
 1ca:	96 2f       	mov	r25, r22
 1cc:	67 2f       	mov	r22, r23
	M_DIO_set_pin_direction(UTS.port,UTS.triger,output);
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	78 2f       	mov	r23, r24
 1d2:	89 2f       	mov	r24, r25
 1d4:	0e 94 8c 02 	call	0x518	; 0x518 <M_DIO_set_pin_direction>
	M_Timer_1_input_capture_unit_init(rinsing_edge);
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 78 03 	call	0x6f0	; 0x6f0 <M_Timer_1_input_capture_unit_init>
 1de:	08 95       	ret

000001e0 <H_ultrasonic_measure>:
}

u16 H_ultrasonic_measure(ultrasonic_object UTS){
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	c6 2f       	mov	r28, r22
 1e8:	17 2f       	mov	r17, r23
 1ea:	d8 2f       	mov	r29, r24
	M_DIO_set_pin_value(UTS.port,UTS.triger,low);
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	67 2f       	mov	r22, r23
 1f0:	78 2f       	mov	r23, r24
 1f2:	8c 2f       	mov	r24, r28
 1f4:	0e 94 03 03 	call	0x606	; 0x606 <M_DIO_set_pin_value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	8a 95       	dec	r24
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <H_ultrasonic_measure+0x1a>
 1fe:	00 00       	nop
	_delay_us(2);
	M_DIO_set_pin_value(UTS.port,UTS.triger,high);
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	61 2f       	mov	r22, r17
 204:	7d 2f       	mov	r23, r29
 206:	8c 2f       	mov	r24, r28
 208:	0e 94 03 03 	call	0x606	; 0x606 <M_DIO_set_pin_value>
 20c:	8a e1       	ldi	r24, 0x1A	; 26
 20e:	8a 95       	dec	r24
 210:	f1 f7       	brne	.-4      	; 0x20e <H_ultrasonic_measure+0x2e>
 212:	00 c0       	rjmp	.+0      	; 0x214 <H_ultrasonic_measure+0x34>
	_delay_us(10);
	M_DIO_set_pin_value(UTS.port,UTS.triger,low);
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	61 2f       	mov	r22, r17
 218:	7d 2f       	mov	r23, r29
 21a:	8c 2f       	mov	r24, r28
 21c:	0e 94 03 03 	call	0x606	; 0x606 <M_DIO_set_pin_value>
	return ((M_Timer_1_pulse_width()*34300)/(F_CPU*2));
 220:	0e 94 8e 03 	call	0x71c	; 0x71c <M_Timer_1_pulse_width>
 224:	9c 01       	movw	r18, r24
 226:	ac ef       	ldi	r26, 0xFC	; 252
 228:	b5 e8       	ldi	r27, 0x85	; 133
 22a:	0e 94 1a 04 	call	0x834	; 0x834 <__umulhisi3>
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	34 e2       	ldi	r19, 0x24	; 36
 232:	44 ef       	ldi	r20, 0xF4	; 244
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__udivmodsi4>
 23a:	c9 01       	movw	r24, r18
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	08 95       	ret

00000244 <car_forward>:
	}
}


void car_forward(void){
	H_DC_motor_forward(left_wheel);
 244:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <left_wheel>
 248:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <left_wheel+0x1>
 24c:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <left_wheel+0x2>
 250:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <left_wheel+0x3>
 254:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <left_wheel+0x4>
 258:	0e 94 6b 00 	call	0xd6	; 0xd6 <H_DC_motor_forward>
	H_DC_motor_forward(right_wheel);
 25c:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <right_wheel>
 260:	50 91 64 00 	lds	r21, 0x0064	; 0x800064 <right_wheel+0x1>
 264:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <right_wheel+0x2>
 268:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <right_wheel+0x3>
 26c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <right_wheel+0x4>
 270:	0e 94 6b 00 	call	0xd6	; 0xd6 <H_DC_motor_forward>
 274:	08 95       	ret

00000276 <car_backward>:
}

void car_backward(void){
	H_DC_motor_backward(left_wheel);
 276:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <left_wheel>
 27a:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <left_wheel+0x1>
 27e:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <left_wheel+0x2>
 282:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <left_wheel+0x3>
 286:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <left_wheel+0x4>
 28a:	0e 94 8d 00 	call	0x11a	; 0x11a <H_DC_motor_backward>
	H_DC_motor_backward(right_wheel);
 28e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <right_wheel>
 292:	50 91 64 00 	lds	r21, 0x0064	; 0x800064 <right_wheel+0x1>
 296:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <right_wheel+0x2>
 29a:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <right_wheel+0x3>
 29e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <right_wheel+0x4>
 2a2:	0e 94 8d 00 	call	0x11a	; 0x11a <H_DC_motor_backward>
 2a6:	08 95       	ret

000002a8 <car_right>:
}

void car_right(void){
	H_DC_motor_forward(left_wheel);
 2a8:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <left_wheel>
 2ac:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <left_wheel+0x1>
 2b0:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <left_wheel+0x2>
 2b4:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <left_wheel+0x3>
 2b8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <left_wheel+0x4>
 2bc:	0e 94 6b 00 	call	0xd6	; 0xd6 <H_DC_motor_forward>
	H_DC_motor_backward(right_wheel);
 2c0:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <right_wheel>
 2c4:	50 91 64 00 	lds	r21, 0x0064	; 0x800064 <right_wheel+0x1>
 2c8:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <right_wheel+0x2>
 2cc:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <right_wheel+0x3>
 2d0:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <right_wheel+0x4>
 2d4:	0e 94 8d 00 	call	0x11a	; 0x11a <H_DC_motor_backward>
 2d8:	08 95       	ret

000002da <car_left>:
}

void car_left(void){
	H_DC_motor_backward(left_wheel);
 2da:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <left_wheel>
 2de:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <left_wheel+0x1>
 2e2:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <left_wheel+0x2>
 2e6:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <left_wheel+0x3>
 2ea:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <left_wheel+0x4>
 2ee:	0e 94 8d 00 	call	0x11a	; 0x11a <H_DC_motor_backward>
	H_DC_motor_forward(right_wheel);
 2f2:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <right_wheel>
 2f6:	50 91 64 00 	lds	r21, 0x0064	; 0x800064 <right_wheel+0x1>
 2fa:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <right_wheel+0x2>
 2fe:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <right_wheel+0x3>
 302:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <right_wheel+0x4>
 306:	0e 94 6b 00 	call	0xd6	; 0xd6 <H_DC_motor_forward>
 30a:	08 95       	ret

0000030c <car_stop>:
}

void car_stop(void){
	H_DC_motor_stop(left_wheel);
 30c:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <left_wheel>
 310:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <left_wheel+0x1>
 314:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <left_wheel+0x2>
 318:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <left_wheel+0x3>
 31c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <left_wheel+0x4>
 320:	0e 94 af 00 	call	0x15e	; 0x15e <H_DC_motor_stop>
	H_DC_motor_stop(right_wheel);
 324:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <right_wheel>
 328:	50 91 64 00 	lds	r21, 0x0064	; 0x800064 <right_wheel+0x1>
 32c:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <right_wheel+0x2>
 330:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <right_wheel+0x3>
 334:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <right_wheel+0x4>
 338:	0e 94 af 00 	call	0x15e	; 0x15e <H_DC_motor_stop>
 33c:	08 95       	ret

0000033e <searching_algorithm>:
}

void searching_algorithm(void){
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
	car_stop();
 342:	0e 94 86 01 	call	0x30c	; 0x30c <car_stop>
	ultrasonic_exit_flag=0;
 346:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <ultrasonic_exit_flag+0x1>
 34a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <ultrasonic_exit_flag>
	servo_feedback=90;
 34e:	8a e5       	ldi	r24, 0x5A	; 90
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <servo_feedback+0x1>
 356:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <servo_feedback>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35a:	2f ef       	ldi	r18, 0xFF	; 255
 35c:	80 e7       	ldi	r24, 0x70	; 112
 35e:	92 e0       	ldi	r25, 0x02	; 2
 360:	21 50       	subi	r18, 0x01	; 1
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <searching_algorithm+0x22>
 368:	00 c0       	rjmp	.+0      	; 0x36a <searching_algorithm+0x2c>
 36a:	00 00       	nop
	_delay_ms(100);		
	for (int servo_angle=0;servo_angle<180;servo_angle++)
 36c:	c0 e0       	ldi	r28, 0x00	; 0
 36e:	d0 e0       	ldi	r29, 0x00	; 0
 370:	1f c0       	rjmp	.+62     	; 0x3b0 <searching_algorithm+0x72>
	{
		H_Servo_angle(servo_angle);
 372:	8c 2f       	mov	r24, r28
 374:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <H_Servo_angle>
		if (H_ultrasonic_measure(UTS)>=max_distance )
 378:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 37c:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 380:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 384:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <H_ultrasonic_measure>
 388:	42 97       	sbiw	r24, 0x12	; 18
 38a:	58 f0       	brcs	.+22     	; 0x3a2 <searching_algorithm+0x64>
		{
			servo_feedback=servo_angle;
 38c:	d0 93 75 00 	sts	0x0075, r29	; 0x800075 <servo_feedback+0x1>
 390:	c0 93 74 00 	sts	0x0074, r28	; 0x800074 <servo_feedback>
			ultrasonic_exit_flag=1;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <ultrasonic_exit_flag+0x1>
 39c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <ultrasonic_exit_flag>
			break;
 3a0:	0a c0       	rjmp	.+20     	; 0x3b6 <searching_algorithm+0x78>
 3a2:	8f e2       	ldi	r24, 0x2F	; 47
 3a4:	95 e7       	ldi	r25, 0x75	; 117
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <searching_algorithm+0x68>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <searching_algorithm+0x6e>
 3ac:	00 00       	nop
void searching_algorithm(void){
	car_stop();
	ultrasonic_exit_flag=0;
	servo_feedback=90;
	_delay_ms(100);		
	for (int servo_angle=0;servo_angle<180;servo_angle++)
 3ae:	21 96       	adiw	r28, 0x01	; 1
 3b0:	c4 3b       	cpi	r28, 0xB4	; 180
 3b2:	d1 05       	cpc	r29, r1
 3b4:	f4 f2       	brlt	.-68     	; 0x372 <searching_algorithm+0x34>
			break;
		}
		_delay_ms(15);
	}
	
	H_Servo_angle(90);
 3b6:	8a e5       	ldi	r24, 0x5A	; 90
 3b8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <H_Servo_angle>
 3bc:	9f ef       	ldi	r25, 0xFF	; 255
 3be:	20 e7       	ldi	r18, 0x70	; 112
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	91 50       	subi	r25, 0x01	; 1
 3c4:	20 40       	sbci	r18, 0x00	; 0
 3c6:	80 40       	sbci	r24, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <searching_algorithm+0x84>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <searching_algorithm+0x8e>
 3cc:	00 00       	nop
	_delay_ms(100);
	
	if (ultrasonic_exit_flag==1)
 3ce:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <ultrasonic_exit_flag>
 3d2:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <ultrasonic_exit_flag+0x1>
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	91 05       	cpc	r25, r1
 3da:	c1 f5       	brne	.+112    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
	{
		if (servo_feedback<90)
 3dc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <servo_feedback>
 3e0:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <servo_feedback+0x1>
 3e4:	8a 35       	cpi	r24, 0x5A	; 90
 3e6:	91 05       	cpc	r25, r1
 3e8:	64 f0       	brlt	.+24     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3ea:	16 c0       	rjmp	.+44     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		{
			while (H_ultrasonic_measure(UTS)<max_distance)
			{
				car_right();
 3ec:	0e 94 54 01 	call	0x2a8	; 0x2a8 <car_right>
 3f0:	9f ef       	ldi	r25, 0xFF	; 255
 3f2:	20 e7       	ldi	r18, 0x70	; 112
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	91 50       	subi	r25, 0x01	; 1
 3f8:	20 40       	sbci	r18, 0x00	; 0
 3fa:	80 40       	sbci	r24, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <searching_algorithm+0xb8>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
 400:	00 00       	nop
	
	if (ultrasonic_exit_flag==1)
	{
		if (servo_feedback<90)
		{
			while (H_ultrasonic_measure(UTS)<max_distance)
 402:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 406:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 40a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 40e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <H_ultrasonic_measure>
 412:	42 97       	sbiw	r24, 0x12	; 18
 414:	58 f3       	brcs	.-42     	; 0x3ec <searching_algorithm+0xae>
 416:	34 c0       	rjmp	.+104    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			{
				car_right();
				_delay_ms(100);
			}
		}
		else if (servo_feedback>90)
 418:	8b 35       	cpi	r24, 0x5B	; 91
 41a:	91 05       	cpc	r25, r1
 41c:	64 f4       	brge	.+24     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 41e:	30 c0       	rjmp	.+96     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
		{
			while (H_ultrasonic_measure(UTS)<max_distance)
			{
				car_left();
 420:	0e 94 6d 01 	call	0x2da	; 0x2da <car_left>
 424:	9f ef       	ldi	r25, 0xFF	; 255
 426:	20 e7       	ldi	r18, 0x70	; 112
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	91 50       	subi	r25, 0x01	; 1
 42c:	20 40       	sbci	r18, 0x00	; 0
 42e:	80 40       	sbci	r24, 0x00	; 0
 430:	e1 f7       	brne	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 434:	00 00       	nop
				_delay_ms(100);
			}
		}
		else if (servo_feedback>90)
		{
			while (H_ultrasonic_measure(UTS)<max_distance)
 436:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 43a:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 43e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 442:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <H_ultrasonic_measure>
 446:	42 97       	sbiw	r24, 0x12	; 18
 448:	58 f3       	brcs	.-42     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 44a:	1a c0       	rjmp	.+52     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
				car_left();
				_delay_ms(100);
			}
		}
	}
	else if(ultrasonic_exit_flag==0)
 44c:	89 2b       	or	r24, r25
 44e:	61 f0       	breq	.+24     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 450:	17 c0       	rjmp	.+46     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
	{
		while (H_ultrasonic_measure(UTS)<max_distance)
		{
			car_backward();
 452:	0e 94 3b 01 	call	0x276	; 0x276 <car_backward>
 456:	9f ef       	ldi	r25, 0xFF	; 255
 458:	20 e7       	ldi	r18, 0x70	; 112
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	91 50       	subi	r25, 0x01	; 1
 45e:	20 40       	sbci	r18, 0x00	; 0
 460:	80 40       	sbci	r24, 0x00	; 0
 462:	e1 f7       	brne	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 464:	00 c0       	rjmp	.+0      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 466:	00 00       	nop
			}
		}
	}
	else if(ultrasonic_exit_flag==0)
	{
		while (H_ultrasonic_measure(UTS)<max_distance)
 468:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 46c:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 470:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 474:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <H_ultrasonic_measure>
 478:	42 97       	sbiw	r24, 0x12	; 18
 47a:	58 f3       	brcs	.-42     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
		{
			car_backward();
			_delay_ms(100);	
		}
		searching_algorithm();
 47c:	0e 94 9f 01 	call	0x33e	; 0x33e <searching_algorithm>
	}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <main>:


int main(void){
	
	//DC_motor configurations
	H_DC_motor_init(left_wheel);
 486:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <left_wheel>
 48a:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <left_wheel+0x1>
 48e:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <left_wheel+0x2>
 492:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <left_wheel+0x3>
 496:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <left_wheel+0x4>
 49a:	0e 94 49 00 	call	0x92	; 0x92 <H_DC_motor_init>
	H_DC_motor_init(right_wheel);
 49e:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <right_wheel>
 4a2:	50 91 64 00 	lds	r21, 0x0064	; 0x800064 <right_wheel+0x1>
 4a6:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <right_wheel+0x2>
 4aa:	70 91 66 00 	lds	r23, 0x0066	; 0x800066 <right_wheel+0x3>
 4ae:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <right_wheel+0x4>
 4b2:	0e 94 49 00 	call	0x92	; 0x92 <H_DC_motor_init>
	
	//Servo configuration
	H_Servo_init();
 4b6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <H_Servo_init>
	H_Servo_angle(90);
 4ba:	8a e5       	ldi	r24, 0x5A	; 90
 4bc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <H_Servo_angle>
	
	//UTS configuration
	H_ultrasonic_init(UTS);
 4c0:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4c4:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 4cc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <H_ultrasonic_init>
 4d0:	2f ef       	ldi	r18, 0xFF	; 255
 4d2:	84 e3       	ldi	r24, 0x34	; 52
 4d4:	9c e0       	ldi	r25, 0x0C	; 12
 4d6:	21 50       	subi	r18, 0x01	; 1
 4d8:	80 40       	sbci	r24, 0x00	; 0
 4da:	90 40       	sbci	r25, 0x00	; 0
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <main+0x50>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <main+0x5a>
 4e0:	00 00       	nop
	
	
	_delay_ms(500);
	while (1)
	{
		if (H_ultrasonic_measure(UTS)>=max_distance)
 4e2:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4e6:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 4ee:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <H_ultrasonic_measure>
 4f2:	42 97       	sbiw	r24, 0x12	; 18
 4f4:	18 f0       	brcs	.+6      	; 0x4fc <main+0x76>
		{
			car_forward();
 4f6:	0e 94 22 01 	call	0x244	; 0x244 <car_forward>
 4fa:	04 c0       	rjmp	.+8      	; 0x504 <main+0x7e>
		}
		else
		{
			car_stop();
 4fc:	0e 94 86 01 	call	0x30c	; 0x30c <car_stop>
			searching_algorithm();
 500:	0e 94 9f 01 	call	0x33e	; 0x33e <searching_algorithm>
 504:	2f ef       	ldi	r18, 0xFF	; 255
 506:	80 e7       	ldi	r24, 0x70	; 112
 508:	92 e0       	ldi	r25, 0x02	; 2
 50a:	21 50       	subi	r18, 0x01	; 1
 50c:	80 40       	sbci	r24, 0x00	; 0
 50e:	90 40       	sbci	r25, 0x00	; 0
 510:	e1 f7       	brne	.-8      	; 0x50a <main+0x84>
 512:	00 c0       	rjmp	.+0      	; 0x514 <main+0x8e>
 514:	00 00       	nop
 516:	e5 cf       	rjmp	.-54     	; 0x4e2 <main+0x5c>

00000518 <M_DIO_set_pin_direction>:
 518:	81 30       	cpi	r24, 0x01	; 1
 51a:	19 f1       	breq	.+70     	; 0x562 <M_DIO_set_pin_direction+0x4a>
 51c:	30 f0       	brcs	.+12     	; 0x52a <M_DIO_set_pin_direction+0x12>
 51e:	82 30       	cpi	r24, 0x02	; 2
 520:	e1 f1       	breq	.+120    	; 0x59a <M_DIO_set_pin_direction+0x82>
 522:	83 30       	cpi	r24, 0x03	; 3
 524:	09 f4       	brne	.+2      	; 0x528 <M_DIO_set_pin_direction+0x10>
 526:	54 c0       	rjmp	.+168    	; 0x5d0 <M_DIO_set_pin_direction+0xb8>
 528:	08 95       	ret
 52a:	41 11       	cpse	r20, r1
 52c:	0c c0       	rjmp	.+24     	; 0x546 <M_DIO_set_pin_direction+0x2e>
 52e:	2a b3       	in	r18, 0x1a	; 26
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 c0       	rjmp	.+4      	; 0x53a <M_DIO_set_pin_direction+0x22>
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	6a 95       	dec	r22
 53c:	e2 f7       	brpl	.-8      	; 0x536 <M_DIO_set_pin_direction+0x1e>
 53e:	80 95       	com	r24
 540:	82 23       	and	r24, r18
 542:	8a bb       	out	0x1a, r24	; 26
 544:	08 95       	ret
 546:	41 30       	cpi	r20, 0x01	; 1
 548:	09 f0       	breq	.+2      	; 0x54c <M_DIO_set_pin_direction+0x34>
 54a:	5c c0       	rjmp	.+184    	; 0x604 <M_DIO_set_pin_direction+0xec>
 54c:	2a b3       	in	r18, 0x1a	; 26
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <M_DIO_set_pin_direction+0x40>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	6a 95       	dec	r22
 55a:	e2 f7       	brpl	.-8      	; 0x554 <M_DIO_set_pin_direction+0x3c>
 55c:	82 2b       	or	r24, r18
 55e:	8a bb       	out	0x1a, r24	; 26
 560:	08 95       	ret
 562:	41 11       	cpse	r20, r1
 564:	0c c0       	rjmp	.+24     	; 0x57e <M_DIO_set_pin_direction+0x66>
 566:	27 b3       	in	r18, 0x17	; 23
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <M_DIO_set_pin_direction+0x5a>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <M_DIO_set_pin_direction+0x56>
 576:	80 95       	com	r24
 578:	82 23       	and	r24, r18
 57a:	87 bb       	out	0x17, r24	; 23
 57c:	08 95       	ret
 57e:	41 30       	cpi	r20, 0x01	; 1
 580:	09 f0       	breq	.+2      	; 0x584 <M_DIO_set_pin_direction+0x6c>
 582:	40 c0       	rjmp	.+128    	; 0x604 <M_DIO_set_pin_direction+0xec>
 584:	27 b3       	in	r18, 0x17	; 23
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	02 c0       	rjmp	.+4      	; 0x590 <M_DIO_set_pin_direction+0x78>
 58c:	88 0f       	add	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	6a 95       	dec	r22
 592:	e2 f7       	brpl	.-8      	; 0x58c <M_DIO_set_pin_direction+0x74>
 594:	82 2b       	or	r24, r18
 596:	87 bb       	out	0x17, r24	; 23
 598:	08 95       	ret
 59a:	41 11       	cpse	r20, r1
 59c:	0c c0       	rjmp	.+24     	; 0x5b6 <M_DIO_set_pin_direction+0x9e>
 59e:	24 b3       	in	r18, 0x14	; 20
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <M_DIO_set_pin_direction+0x92>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	6a 95       	dec	r22
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <M_DIO_set_pin_direction+0x8e>
 5ae:	80 95       	com	r24
 5b0:	82 23       	and	r24, r18
 5b2:	84 bb       	out	0x14, r24	; 20
 5b4:	08 95       	ret
 5b6:	41 30       	cpi	r20, 0x01	; 1
 5b8:	29 f5       	brne	.+74     	; 0x604 <M_DIO_set_pin_direction+0xec>
 5ba:	24 b3       	in	r18, 0x14	; 20
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <M_DIO_set_pin_direction+0xae>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <M_DIO_set_pin_direction+0xaa>
 5ca:	82 2b       	or	r24, r18
 5cc:	84 bb       	out	0x14, r24	; 20
 5ce:	08 95       	ret
 5d0:	41 11       	cpse	r20, r1
 5d2:	0c c0       	rjmp	.+24     	; 0x5ec <M_DIO_set_pin_direction+0xd4>
 5d4:	21 b3       	in	r18, 0x11	; 17
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <M_DIO_set_pin_direction+0xc8>
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	6a 95       	dec	r22
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <M_DIO_set_pin_direction+0xc4>
 5e4:	80 95       	com	r24
 5e6:	82 23       	and	r24, r18
 5e8:	81 bb       	out	0x11, r24	; 17
 5ea:	08 95       	ret
 5ec:	41 30       	cpi	r20, 0x01	; 1
 5ee:	51 f4       	brne	.+20     	; 0x604 <M_DIO_set_pin_direction+0xec>
 5f0:	21 b3       	in	r18, 0x11	; 17
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <M_DIO_set_pin_direction+0xe4>
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	6a 95       	dec	r22
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <M_DIO_set_pin_direction+0xe0>
 600:	82 2b       	or	r24, r18
 602:	81 bb       	out	0x11, r24	; 17
 604:	08 95       	ret

00000606 <M_DIO_set_pin_value>:
 606:	81 30       	cpi	r24, 0x01	; 1
 608:	11 f1       	breq	.+68     	; 0x64e <M_DIO_set_pin_value+0x48>
 60a:	30 f0       	brcs	.+12     	; 0x618 <M_DIO_set_pin_value+0x12>
 60c:	82 30       	cpi	r24, 0x02	; 2
 60e:	d1 f1       	breq	.+116    	; 0x684 <M_DIO_set_pin_value+0x7e>
 610:	83 30       	cpi	r24, 0x03	; 3
 612:	09 f4       	brne	.+2      	; 0x616 <M_DIO_set_pin_value+0x10>
 614:	52 c0       	rjmp	.+164    	; 0x6ba <M_DIO_set_pin_value+0xb4>
 616:	08 95       	ret
 618:	41 30       	cpi	r20, 0x01	; 1
 61a:	59 f4       	brne	.+22     	; 0x632 <M_DIO_set_pin_value+0x2c>
 61c:	2b b3       	in	r18, 0x1b	; 27
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <M_DIO_set_pin_value+0x22>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	6a 95       	dec	r22
 62a:	e2 f7       	brpl	.-8      	; 0x624 <M_DIO_set_pin_value+0x1e>
 62c:	82 2b       	or	r24, r18
 62e:	8b bb       	out	0x1b, r24	; 27
 630:	08 95       	ret
 632:	41 11       	cpse	r20, r1
 634:	5c c0       	rjmp	.+184    	; 0x6ee <M_DIO_set_pin_value+0xe8>
 636:	2b b3       	in	r18, 0x1b	; 27
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	02 c0       	rjmp	.+4      	; 0x642 <M_DIO_set_pin_value+0x3c>
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	6a 95       	dec	r22
 644:	e2 f7       	brpl	.-8      	; 0x63e <M_DIO_set_pin_value+0x38>
 646:	80 95       	com	r24
 648:	82 23       	and	r24, r18
 64a:	8b bb       	out	0x1b, r24	; 27
 64c:	08 95       	ret
 64e:	41 30       	cpi	r20, 0x01	; 1
 650:	59 f4       	brne	.+22     	; 0x668 <M_DIO_set_pin_value+0x62>
 652:	28 b3       	in	r18, 0x18	; 24
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <M_DIO_set_pin_value+0x58>
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <M_DIO_set_pin_value+0x54>
 662:	82 2b       	or	r24, r18
 664:	88 bb       	out	0x18, r24	; 24
 666:	08 95       	ret
 668:	41 11       	cpse	r20, r1
 66a:	41 c0       	rjmp	.+130    	; 0x6ee <M_DIO_set_pin_value+0xe8>
 66c:	28 b3       	in	r18, 0x18	; 24
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	02 c0       	rjmp	.+4      	; 0x678 <M_DIO_set_pin_value+0x72>
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	6a 95       	dec	r22
 67a:	e2 f7       	brpl	.-8      	; 0x674 <M_DIO_set_pin_value+0x6e>
 67c:	80 95       	com	r24
 67e:	82 23       	and	r24, r18
 680:	88 bb       	out	0x18, r24	; 24
 682:	08 95       	ret
 684:	41 30       	cpi	r20, 0x01	; 1
 686:	59 f4       	brne	.+22     	; 0x69e <M_DIO_set_pin_value+0x98>
 688:	25 b3       	in	r18, 0x15	; 21
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <M_DIO_set_pin_value+0x8e>
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	6a 95       	dec	r22
 696:	e2 f7       	brpl	.-8      	; 0x690 <M_DIO_set_pin_value+0x8a>
 698:	82 2b       	or	r24, r18
 69a:	85 bb       	out	0x15, r24	; 21
 69c:	08 95       	ret
 69e:	41 11       	cpse	r20, r1
 6a0:	26 c0       	rjmp	.+76     	; 0x6ee <M_DIO_set_pin_value+0xe8>
 6a2:	25 b3       	in	r18, 0x15	; 21
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <M_DIO_set_pin_value+0xa8>
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	6a 95       	dec	r22
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <M_DIO_set_pin_value+0xa4>
 6b2:	80 95       	com	r24
 6b4:	82 23       	and	r24, r18
 6b6:	85 bb       	out	0x15, r24	; 21
 6b8:	08 95       	ret
 6ba:	41 30       	cpi	r20, 0x01	; 1
 6bc:	59 f4       	brne	.+22     	; 0x6d4 <M_DIO_set_pin_value+0xce>
 6be:	22 b3       	in	r18, 0x12	; 18
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <M_DIO_set_pin_value+0xc4>
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	6a 95       	dec	r22
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <M_DIO_set_pin_value+0xc0>
 6ce:	82 2b       	or	r24, r18
 6d0:	82 bb       	out	0x12, r24	; 18
 6d2:	08 95       	ret
 6d4:	41 11       	cpse	r20, r1
 6d6:	0b c0       	rjmp	.+22     	; 0x6ee <M_DIO_set_pin_value+0xe8>
 6d8:	22 b3       	in	r18, 0x12	; 18
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <M_DIO_set_pin_value+0xde>
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	6a 95       	dec	r22
 6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <M_DIO_set_pin_value+0xda>
 6e8:	80 95       	com	r24
 6ea:	82 23       	and	r24, r18
 6ec:	82 bb       	out	0x12, r24	; 18
 6ee:	08 95       	ret

000006f0 <M_Timer_1_input_capture_unit_init>:
volatile int y=0;
volatile int z=0;


void M_Timer_1_input_capture_unit_init(interruption_edge edge){
	clear_bit(DDRD,6);
 6f0:	91 b3       	in	r25, 0x11	; 17
 6f2:	9f 7b       	andi	r25, 0xBF	; 191
 6f4:	91 bb       	out	0x11, r25	; 17
	set_reg_mask(TCCR1B,1);
 6f6:	9e b5       	in	r25, 0x2e	; 46
 6f8:	91 60       	ori	r25, 0x01	; 1
 6fa:	9e bd       	out	0x2e, r25	; 46
	set_bit(TIMSK,5);
 6fc:	99 b7       	in	r25, 0x39	; 57
 6fe:	90 62       	ori	r25, 0x20	; 32
 700:	99 bf       	out	0x39, r25	; 57
	if (edge==rinsing_edge)
 702:	81 30       	cpi	r24, 0x01	; 1
 704:	21 f4       	brne	.+8      	; 0x70e <M_Timer_1_input_capture_unit_init+0x1e>
	{
		set_bit(TCCR1B,6);
 706:	8e b5       	in	r24, 0x2e	; 46
 708:	80 64       	ori	r24, 0x40	; 64
 70a:	8e bd       	out	0x2e, r24	; 46
 70c:	05 c0       	rjmp	.+10     	; 0x718 <M_Timer_1_input_capture_unit_init+0x28>
	}
	else if (edge==falling_edge)
 70e:	81 11       	cpse	r24, r1
 710:	03 c0       	rjmp	.+6      	; 0x718 <M_Timer_1_input_capture_unit_init+0x28>
	{
		clear_bit(TCCR1B,6);
 712:	8e b5       	in	r24, 0x2e	; 46
 714:	8f 7b       	andi	r24, 0xBF	; 191
 716:	8e bd       	out	0x2e, r24	; 46
	}
	sei();
 718:	78 94       	sei
 71a:	08 95       	ret

0000071c <M_Timer_1_pulse_width>:
}

u16 M_Timer_1_pulse_width(void){
	u16 x;
	if (y%2==0)
 71c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <y>
 720:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <y+0x1>
 724:	80 fd       	sbrc	r24, 0
 726:	09 c0       	rjmp	.+18     	; 0x73a <M_Timer_1_pulse_width+0x1e>
	{
		x=array[1]-array[0];
 728:	e6 e7       	ldi	r30, 0x76	; 118
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	82 81       	ldd	r24, Z+2	; 0x02
 72e:	93 81       	ldd	r25, Z+3	; 0x03
 730:	20 81       	ld	r18, Z
 732:	31 81       	ldd	r19, Z+1	; 0x01
		return x;
 734:	82 1b       	sub	r24, r18
 736:	93 0b       	sbc	r25, r19
 738:	08 95       	ret
	}
}
 73a:	08 95       	ret

0000073c <__vector_6>:



ISR(TIMER1_CAPT_vect){	
 73c:	1f 92       	push	r1
 73e:	0f 92       	push	r0
 740:	0f b6       	in	r0, 0x3f	; 63
 742:	0f 92       	push	r0
 744:	11 24       	eor	r1, r1
 746:	2f 93       	push	r18
 748:	8f 93       	push	r24
 74a:	9f 93       	push	r25
 74c:	ef 93       	push	r30
 74e:	ff 93       	push	r31
	array[z]=ICR1;
 750:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end>
 754:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0x1>
 758:	86 b5       	in	r24, 0x26	; 38
 75a:	97 b5       	in	r25, 0x27	; 39
 75c:	ee 0f       	add	r30, r30
 75e:	ff 1f       	adc	r31, r31
 760:	ea 58       	subi	r30, 0x8A	; 138
 762:	ff 4f       	sbci	r31, 0xFF	; 255
 764:	91 83       	std	Z+1, r25	; 0x01
 766:	80 83       	st	Z, r24
	y++;
 768:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <y>
 76c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <y+0x1>
 770:	01 96       	adiw	r24, 0x01	; 1
 772:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <y+0x1>
 776:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <y>
	z^=1;
 77a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 77e:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
 782:	21 e0       	ldi	r18, 0x01	; 1
 784:	82 27       	eor	r24, r18
 786:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__data_end+0x1>
 78a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
	toggle_bit(TCCR1B,6);
 78e:	9e b5       	in	r25, 0x2e	; 46
 790:	80 e4       	ldi	r24, 0x40	; 64
 792:	89 27       	eor	r24, r25
 794:	8e bd       	out	0x2e, r24	; 46
 796:	ff 91       	pop	r31
 798:	ef 91       	pop	r30
 79a:	9f 91       	pop	r25
 79c:	8f 91       	pop	r24
 79e:	2f 91       	pop	r18
 7a0:	0f 90       	pop	r0
 7a2:	0f be       	out	0x3f, r0	; 63
 7a4:	0f 90       	pop	r0
 7a6:	1f 90       	pop	r1
 7a8:	18 95       	reti

000007aa <M_Timer_2_init>:
 */ 

#include "Timer_2.h"

void M_Timer_2_init(wave_form_generator_mode mode){
	if (mode==PWM)
 7aa:	82 30       	cpi	r24, 0x02	; 2
 7ac:	31 f4       	brne	.+12     	; 0x7ba <M_Timer_2_init+0x10>
	{
		set_reg_mask(TCCR2,0b01101000);
 7ae:	85 b5       	in	r24, 0x25	; 37
 7b0:	88 66       	ori	r24, 0x68	; 104
 7b2:	85 bd       	out	0x25, r24	; 37
		set_bit(DDRD,7);
 7b4:	81 b3       	in	r24, 0x11	; 17
 7b6:	80 68       	ori	r24, 0x80	; 128
 7b8:	81 bb       	out	0x11, r24	; 17
 7ba:	08 95       	ret

000007bc <M_Timer_2_start>:
	}
}

void M_Timer_2_start(u8 prescaler){
	set_reg_mask(TCCR2,prescaler);
 7bc:	95 b5       	in	r25, 0x25	; 37
 7be:	89 2b       	or	r24, r25
 7c0:	85 bd       	out	0x25, r24	; 37
 7c2:	08 95       	ret

000007c4 <M_Timer_2_PWM>:
}

void M_Timer_2_PWM(u8 PWM_value){
	set_reg_value(OCR2,PWM_value);	
 7c4:	83 bd       	out	0x23, r24	; 35
 7c6:	08 95       	ret

000007c8 <__divmodhi4>:
 7c8:	97 fb       	bst	r25, 7
 7ca:	07 2e       	mov	r0, r23
 7cc:	16 f4       	brtc	.+4      	; 0x7d2 <__divmodhi4+0xa>
 7ce:	00 94       	com	r0
 7d0:	07 d0       	rcall	.+14     	; 0x7e0 <__divmodhi4_neg1>
 7d2:	77 fd       	sbrc	r23, 7
 7d4:	09 d0       	rcall	.+18     	; 0x7e8 <__divmodhi4_neg2>
 7d6:	0e 94 29 04 	call	0x852	; 0x852 <__udivmodhi4>
 7da:	07 fc       	sbrc	r0, 7
 7dc:	05 d0       	rcall	.+10     	; 0x7e8 <__divmodhi4_neg2>
 7de:	3e f4       	brtc	.+14     	; 0x7ee <__divmodhi4_exit>

000007e0 <__divmodhi4_neg1>:
 7e0:	90 95       	com	r25
 7e2:	81 95       	neg	r24
 7e4:	9f 4f       	sbci	r25, 0xFF	; 255
 7e6:	08 95       	ret

000007e8 <__divmodhi4_neg2>:
 7e8:	70 95       	com	r23
 7ea:	61 95       	neg	r22
 7ec:	7f 4f       	sbci	r23, 0xFF	; 255

000007ee <__divmodhi4_exit>:
 7ee:	08 95       	ret

000007f0 <__udivmodsi4>:
 7f0:	a1 e2       	ldi	r26, 0x21	; 33
 7f2:	1a 2e       	mov	r1, r26
 7f4:	aa 1b       	sub	r26, r26
 7f6:	bb 1b       	sub	r27, r27
 7f8:	fd 01       	movw	r30, r26
 7fa:	0d c0       	rjmp	.+26     	; 0x816 <__udivmodsi4_ep>

000007fc <__udivmodsi4_loop>:
 7fc:	aa 1f       	adc	r26, r26
 7fe:	bb 1f       	adc	r27, r27
 800:	ee 1f       	adc	r30, r30
 802:	ff 1f       	adc	r31, r31
 804:	a2 17       	cp	r26, r18
 806:	b3 07       	cpc	r27, r19
 808:	e4 07       	cpc	r30, r20
 80a:	f5 07       	cpc	r31, r21
 80c:	20 f0       	brcs	.+8      	; 0x816 <__udivmodsi4_ep>
 80e:	a2 1b       	sub	r26, r18
 810:	b3 0b       	sbc	r27, r19
 812:	e4 0b       	sbc	r30, r20
 814:	f5 0b       	sbc	r31, r21

00000816 <__udivmodsi4_ep>:
 816:	66 1f       	adc	r22, r22
 818:	77 1f       	adc	r23, r23
 81a:	88 1f       	adc	r24, r24
 81c:	99 1f       	adc	r25, r25
 81e:	1a 94       	dec	r1
 820:	69 f7       	brne	.-38     	; 0x7fc <__udivmodsi4_loop>
 822:	60 95       	com	r22
 824:	70 95       	com	r23
 826:	80 95       	com	r24
 828:	90 95       	com	r25
 82a:	9b 01       	movw	r18, r22
 82c:	ac 01       	movw	r20, r24
 82e:	bd 01       	movw	r22, r26
 830:	cf 01       	movw	r24, r30
 832:	08 95       	ret

00000834 <__umulhisi3>:
 834:	a2 9f       	mul	r26, r18
 836:	b0 01       	movw	r22, r0
 838:	b3 9f       	mul	r27, r19
 83a:	c0 01       	movw	r24, r0
 83c:	a3 9f       	mul	r26, r19
 83e:	70 0d       	add	r23, r0
 840:	81 1d       	adc	r24, r1
 842:	11 24       	eor	r1, r1
 844:	91 1d       	adc	r25, r1
 846:	b2 9f       	mul	r27, r18
 848:	70 0d       	add	r23, r0
 84a:	81 1d       	adc	r24, r1
 84c:	11 24       	eor	r1, r1
 84e:	91 1d       	adc	r25, r1
 850:	08 95       	ret

00000852 <__udivmodhi4>:
 852:	aa 1b       	sub	r26, r26
 854:	bb 1b       	sub	r27, r27
 856:	51 e1       	ldi	r21, 0x11	; 17
 858:	07 c0       	rjmp	.+14     	; 0x868 <__udivmodhi4_ep>

0000085a <__udivmodhi4_loop>:
 85a:	aa 1f       	adc	r26, r26
 85c:	bb 1f       	adc	r27, r27
 85e:	a6 17       	cp	r26, r22
 860:	b7 07       	cpc	r27, r23
 862:	10 f0       	brcs	.+4      	; 0x868 <__udivmodhi4_ep>
 864:	a6 1b       	sub	r26, r22
 866:	b7 0b       	sbc	r27, r23

00000868 <__udivmodhi4_ep>:
 868:	88 1f       	adc	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	5a 95       	dec	r21
 86e:	a9 f7       	brne	.-22     	; 0x85a <__udivmodhi4_loop>
 870:	80 95       	com	r24
 872:	90 95       	com	r25
 874:	bc 01       	movw	r22, r24
 876:	cd 01       	movw	r24, r26
 878:	08 95       	ret

0000087a <_exit>:
 87a:	f8 94       	cli

0000087c <__stop_program>:
 87c:	ff cf       	rjmp	.-2      	; 0x87c <__stop_program>
